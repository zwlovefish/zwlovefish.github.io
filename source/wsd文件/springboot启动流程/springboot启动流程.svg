<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2722px" preserveAspectRatio="none" style="width:2303px;height:2722px;background:#FFFFFF;" version="1.1" viewBox="0 0 2303 2722" width="2303px" zoomAndPan="magnify"><defs/><g><ellipse cx="1167.5" cy="20" fill="#222222" rx="10" ry="10" style="stroke:#222222;stroke-width:1.0;"/><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="362" x="986.5" y="50"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="342" x="996.5" y="73.752">SpringApplication.run(DrawingBedOSSApplication.class, args)</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="326" x="1004.5" y="106.3887"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="306" x="1014.5" y="130.1406">public ConfigurableApplicationContext run(String... args)</text><path d="M1386.5,152.7773 L1386.5,207.0405 L1366.5,211.0405 L1386.5,215.0405 L1386.5,269.3037 A0,0 0 0 0 1386.5,269.3037 L1956.5,269.3037 A0,0 0 0 0 1956.5,269.3037 L1956.5,162.7773 L1946.5,152.7773 L1386.5,152.7773 A0,0 0 0 0 1386.5,152.7773 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M1946.5,152.7773 L1946.5,162.7773 L1956.5,162.7773 L1946.5,152.7773 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="362" x="1392.5" y="172.6753">// 这里会执行一次实现了BootstrapRegistryInitializer接口的方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="339" x="1392.5" y="190.4297">private DefaultBootstrapContext createBootstrapContext() {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="440" x="1408.5" y="208.1841">DefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="533" x="1408.5" y="225.9385">this.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="140" x="1408.5" y="243.6929">return bootstrapContext;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1392.5" y="261.4473">}</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="398" x="968.5" y="192.8462"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="378" x="978.5" y="216.5981">DefaultBootstrapContext bootstrapContext = createBootstrapContext()</text><path d="M1276.5,293.6208 L1276.5,303.498 L1256.5,307.498 L1276.5,311.498 L1276.5,321.3752 A0,0 0 0 0 1276.5,321.3752 L1498.5,321.3752 A0,0 0 0 0 1498.5,321.3752 L1498.5,303.6208 L1488.5,293.6208 L1276.5,293.6208 A0,0 0 0 0 1276.5,293.6208 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M1488.5,293.6208 L1488.5,303.6208 L1498.5,303.6208 L1488.5,293.6208 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="201" x="1282.5" y="313.5188">配置java.awt.headless属性为TRUE</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="178" x="1078.5" y="289.3037"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="158" x="1088.5" y="313.0557">configureHeadlessProperty()</text><path d="M1377.5,335.6924 L1377.5,381.0784 L1357.5,385.0784 L1377.5,389.0784 L1377.5,434.4644 A0,0 0 0 0 1377.5,434.4644 L1891.5,434.4644 A0,0 0 0 0 1891.5,434.4644 L1891.5,345.6924 L1881.5,335.6924 L1377.5,335.6924 A0,0 0 0 0 1377.5,335.6924 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M1881.5,335.6924 L1881.5,345.6924 L1891.5,345.6924 L1881.5,335.6924 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="272" x="1383.5" y="355.5903">List&lt;SpringApplicationRunListener&gt; listeners =</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="493" x="1383.5" y="373.3447">getSpringFactoriesInstances(SpringApplicationRunListener.class, argumentResolver);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="338" x="1383.5" y="391.0991">用来在整个启动流程中接受不同执行点事件通知的监听者，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="377" x="1383.5" y="408.8535">SpringApplicationRunListener接口规定了SpringBoot的生命周期，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="383" x="1383.5" y="426.6079">在各个生命周期广播相应的事件，调用实际的ApplicationListener类</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="380" x="977.5" y="366.884"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="360" x="987.5" y="390.636">SpringApplicationRunListeners listeners = getRunListeners(args)</text><path d="M1506,444.4644 L1506,765.0435 L1486,769.0435 L1506,773.0435 L1506,1093.6226 A0,0 0 0 0 1506,1093.6226 L2291,1093.6226 A0,0 0 0 0 2291,1093.6226 L2291,454.4644 L2281,444.4644 L1506,444.4644 A0,0 0 0 0 1506,444.4644 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M2281,444.4644 L2281,454.4644 L2291,454.4644 L2281,444.4644 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="362" x="1512" y="464.3623">1. 将应用的args封装成ApplicationArguments，然后准备环境。</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="182" x="1512" y="482.1167">2. 调用getOrCreateEnvironment</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="384" x="1512" y="499.8711">ConfigurableEnvironment environment = getOrCreateEnvironment();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="511" x="1512" y="517.6255">3. SpringApplication中applicationContextFactory = ApplicationContextFactory.DEFAULT</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="474" x="1512" y="535.3799">4. ApplicationContextFactory DEFAULT = new DefaultApplicationContextFactory()</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="344" x="1512" y="553.1343">private ConfigurableEnvironment getOrCreateEnvironment() {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="159" x="1528" y="570.8887">if (this.environment != null) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="135" x="1544" y="588.6431">return this.environment;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1528" y="606.3975">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="670" x="1528" y="624.1519">ConfigurableEnvironment environment = this.applicationContextFactory.createEnvironment(this.webApplicationType);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="575" x="1528" y="641.9063">if (environment == null &amp;&amp; this.applicationContextFactory != ApplicationContextFactory.DEFAULT) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="563" x="1544" y="659.6606">environment = ApplicationContextFactory.DEFAULT.createEnvironment(this.webApplicationType);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1528" y="677.415">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="423" x="1528" y="695.1694">return (environment != null) ? environment : new ApplicationEnvironment();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1512" y="712.9238">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="599" x="1512" y="730.6782">5. DEFAULT中createEnvironment函数是根据Spring的SPI机制从类路径中获取ApplicationContextFactory</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="764" x="1512" y="748.4326">这个ApplicationContextFactory有两个：ServletWebServerApplicationContextFactory和ReactiveWebServerApplicationContextFactory</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="545" x="1512" y="766.187">public ConfigurableEnvironment createEnvironment(WebApplicationType webApplicationType) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="607" x="1528" y="783.9414">return getFromSpringFactories(webApplicationType, ApplicationContextFactory::createEnvironment, null);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1512" y="801.6958">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="639" x="1512" y="819.4502">6. 根据webApplicationType类型是SERVLET返回的是ServletWebServerApplicationContextFactory中的创建环境</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="464" x="1512" y="837.2046">private &lt;T&gt; T getFromSpringFactories(WebApplicationType webApplicationType,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="581" x="1544" y="854.959">BiFunction&lt;ApplicationContextFactory, WebApplicationType, T&gt; action, Supplier&lt;T&gt; defaultResult) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="655" x="1528" y="872.7134">for (ApplicationContextFactory candidate : SpringFactoriesLoader.loadFactories(ApplicationContextFactory.class,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="177" x="1560" y="890.4678">getClass().getClassLoader())) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="320" x="1544" y="908.2222">T result = action.apply(candidate, webApplicationType);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="97" x="1544" y="925.9766">if (result != null) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="73" x="1560" y="943.731">return result;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1544" y="961.4854">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1528" y="979.2397">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="315" x="1528" y="996.9941">return (defaultResult != null) ? defaultResult.get() : null;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1512" y="1014.7485">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="322" x="1512" y="1032.5029">7. ServletWebServerApplicationContextFactory中执行：</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="545" x="1512" y="1050.2573">public ConfigurableEnvironment createEnvironment(WebApplicationType webApplicationType) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="621" x="1528" y="1068.0117">return (webApplicationType != WebApplicationType.SERVLET) ? null : new ApplicationServletEnvironment();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1512" y="1085.7661">}</text><rect fill="#F1F1F1" height="52.7773" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="637" x="849" y="742.6548"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="477" x="859" y="766.4067">ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="617" x="859" y="782.7954">ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments)</text><path d="M1334.5,1117.9397 L1334.5,1127.8169 L1314.5,1131.8169 L1334.5,1135.8169 L1334.5,1145.6941 A0,0 0 0 0 1334.5,1145.6941 L1467.5,1145.6941 A0,0 0 0 0 1467.5,1145.6941 L1467.5,1127.9397 L1457.5,1117.9397 L1334.5,1117.9397 A0,0 0 0 0 1334.5,1117.9397 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M1457.5,1117.9397 L1457.5,1127.9397 L1467.5,1127.9397 L1457.5,1117.9397 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="112" x="1340.5" y="1137.8376">打印springboot图标</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="294" x="1020.5" y="1113.6226"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="274" x="1030.5" y="1137.3745">Banner printedBanner = printBanner(environment)</text><path d="M1294.5,1160.0112 L1294.5,1507.2219 L1274.5,1511.2219 L1294.5,1515.2219 L1294.5,1862.4326 A0,0 0 0 0 1294.5,1862.4326 L1986.5,1862.4326 A0,0 0 0 0 1986.5,1862.4326 L1986.5,1170.0112 L1976.5,1160.0112 L1294.5,1160.0112 A0,0 0 0 0 1294.5,1160.0112 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M1976.5,1160.0112 L1976.5,1170.0112 L1986.5,1170.0112 L1976.5,1160.0112 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="511" x="1300.5" y="1179.9092">1. SpringApplication中applicationContextFactory = ApplicationContextFactory.DEFAULT</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="474" x="1300.5" y="1197.6636">2. ApplicationContextFactory DEFAULT = new DefaultApplicationContextFactory()</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="403" x="1300.5" y="1215.418">protected ConfigurableApplicationContext createApplicationContext() {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="405" x="1316.5" y="1233.1724">return this.applicationContextFactory.create(this.webApplicationType);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1300.5" y="1250.9268">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="528" x="1300.5" y="1268.6812">3. DEFAULT中create函数是根据Spring的SPI机制从类路径中获取ApplicationContextFactory</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="512" x="1300.5" y="1286.4355">public ConfigurableApplicationContext create(WebApplicationType webApplicationType) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="23" x="1316.5" y="1304.1899">try {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="504" x="1332.5" y="1321.9443">return getFromSpringFactories(webApplicationType, ApplicationContextFactory::create,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="222" x="1364.5" y="1339.6987">this::createDefaultApplicationContext);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1316.5" y="1357.4531">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="128" x="1316.5" y="1375.2075">catch (Exception ex) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="505" x="1332.5" y="1392.9619">throw new IllegalStateException("Unable create a default ApplicationContext instance, "</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="349" x="1364.5" y="1410.7163">+ "you may need a custom ApplicationContextFactory", ex);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1316.5" y="1428.4707">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1300.5" y="1446.2251">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="669" x="1300.5" y="1463.9795">4. 根据webApplicationType类型是SERVLET返回的是在ServletWebServerApplicationContextFactory中创建的context</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="464" x="1300.5" y="1481.7339">private &lt;T&gt; T getFromSpringFactories(WebApplicationType webApplicationType,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="581" x="1332.5" y="1499.4883">BiFunction&lt;ApplicationContextFactory, WebApplicationType, T&gt; action, Supplier&lt;T&gt; defaultResult) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="655" x="1316.5" y="1517.2427">for (ApplicationContextFactory candidate : SpringFactoriesLoader.loadFactories(ApplicationContextFactory.class,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="177" x="1348.5" y="1534.9971">getClass().getClassLoader())) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="320" x="1332.5" y="1552.7515">T result = action.apply(candidate, webApplicationType);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="97" x="1332.5" y="1570.5059">if (result != null) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="73" x="1348.5" y="1588.2603">return result;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1332.5" y="1606.0146">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1316.5" y="1623.769">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="315" x="1316.5" y="1641.5234">return (defaultResult != null) ? defaultResult.get() : null;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1300.5" y="1659.2778">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1300.5" y="1677.0322"> </text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="512" x="1300.5" y="1694.7866">public ConfigurableApplicationContext create(WebApplicationType webApplicationType) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="501" x="1316.5" y="1712.541">return (webApplicationType != WebApplicationType.SERVLET) ? null : createContext();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1300.5" y="1730.2954">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="376" x="1300.5" y="1748.0498">5. 创建的是AnnotationConfigServletWebServerApplicationContext</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="322" x="1300.5" y="1765.8042">private ConfigurableApplicationContext createContext() {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="239" x="1316.5" y="1783.5586">if (!AotDetector.useGeneratedArtifacts()) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="385" x="1332.5" y="1801.313">return new AnnotationConfigServletWebServerApplicationContext();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1316.5" y="1819.0674">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="287" x="1316.5" y="1836.8218">return new ServletWebServerApplicationContext();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1300.5" y="1854.5762">}</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="214" x="1060.5" y="1493.0276"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="194" x="1070.5" y="1516.7795">context = createApplicationContext()</text><path d="M10,1872.4326 L10,1971.2046 A0,0 0 0 0 10,1971.2046 L854,1971.2046 A0,0 0 0 0 854,1971.2046 L854,1925.8186 L874,1921.8186 L854,1917.8186 L854,1882.4326 L844,1872.4326 L10,1872.4326 A0,0 0 0 0 10,1872.4326 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M844,1872.4326 L844,1882.4326 L854,1882.4326 L844,1872.4326 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="232" x="16" y="1892.3306">1. context.setEnvironment(environment);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="475" x="16" y="1910.085">2. applyInitializers(context);这里执行实现了ApplicationContextInitializer接口的方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="381" x="16" y="1927.8394">3. 如果启用了懒加载的话，设置懒加载的beanfactory后置处理器：</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="531" x="16" y="1945.5938">context.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="823" x="16" y="1963.3481">4. 设置BeanFactory的后置处理器：context.addBeanFactoryPostProcessor(new PropertySourceOrderingBeanFactoryPostProcessor(context));</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="587" x="874" y="1903.6243"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="567" x="884" y="1927.3762">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner)</text><path d="M1260.5,1981.2046 L1260.5,2186.3801 L1240.5,2190.3801 L1260.5,2194.3801 L1260.5,2399.5557 A0,0 0 0 0 1260.5,2399.5557 L2039.5,2399.5557 A0,0 0 0 0 2039.5,2399.5557 L2039.5,1991.2046 L2029.5,1981.2046 L1260.5,1981.2046 A0,0 0 0 0 1260.5,1981.2046 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M2029.5,1981.2046 L2029.5,1991.2046 L2039.5,1991.2046 L2029.5,1981.2046 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="394" x="1266.5" y="2001.1025">private void refreshContext(ConfigurableApplicationContext context) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="181" x="1282.5" y="2018.8569">if (this.registerShutdownHook) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="296" x="1298.5" y="2036.6113">shutdownHook.registerApplicationContext(context);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1282.5" y="2054.3657">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="94" x="1282.5" y="2072.1201">refresh(context);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1266.5" y="2089.8745">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="430" x="1266.5" y="2107.6289">protected void refresh(ConfigurableApplicationContext applicationContext) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="162" x="1282.5" y="2125.3833">applicationContext.refresh();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1266.5" y="2143.1377">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="758" x="1266.5" y="2160.8921">由上文可知，创建的是AnnotationConfigServletWebServerApplicationContext，该context继承了ServletWebServerApplicationContext</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="417" x="1266.5" y="2178.6465">所以实际执行的是ServletWebServerApplicationContext中的reshresh方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="417" x="1266.5" y="2196.4009">public final void refresh() throws BeansException, IllegalStateException {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="23" x="1282.5" y="2214.1553">try {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="87" x="1298.5" y="2231.9097">super.refresh();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1282.5" y="2249.6641">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="176" x="1282.5" y="2267.4185">catch (RuntimeException ex) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="230" x="1298.5" y="2285.1729">WebServer webServer = this.webServer;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="124" x="1298.5" y="2302.9272">if (webServer != null) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="100" x="1314.5" y="2320.6816">webServer.stop();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1298.5" y="2338.436">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="53" x="1298.5" y="2356.1904">throw ex;</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1282.5" y="2373.9448">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1266.5" y="2391.6992">}</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="146" x="1094.5" y="2172.1858"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="126" x="1104.5" y="2195.9377">refreshContext(context)</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="260" x="1037.5" y="2419.5557"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="240" x="1047.5" y="2443.3076">afterRefresh(context, applicationArguments)</text><path d="M1317,2465.9443 L1317,2564.5935 L1297,2568.5935 L1317,2572.5935 L1317,2671.2427 A0,0 0 0 0 1317,2671.2427 L1809,2671.2427 A0,0 0 0 0 1809,2671.2427 L1809,2475.9443 L1799,2465.9443 L1317,2465.9443 A0,0 0 0 0 1317,2465.9443 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M1799,2465.9443 L1799,2475.9443 L1809,2475.9443 L1799,2465.9443 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="410" x="1323" y="2485.8423">// 执行Runners,先执行ApplicationRunner，后执行CommandLineRunner</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="471" x="1323" y="2503.5967">private void callRunners(ApplicationContext context, ApplicationArguments args) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="442" x="1339" y="2521.3511">context.getBeanProvider(Runner.class).orderedStream().forEach((runner) -&gt; {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="341" x="1355" y="2539.1055">if (runner instanceof ApplicationRunner applicationRunner) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="209" x="1371" y="2556.8599">callRunner(applicationRunner, args);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1355" y="2574.6143">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="379" x="1355" y="2592.3687">if (runner instanceof CommandLineRunner commandLineRunner) {</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="228" x="1371" y="2610.123">callRunner(commandLineRunner, args);</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1355" y="2627.8774">}</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="12" x="1339" y="2645.6318">});</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="4" x="1323" y="2663.3862">}</text><rect fill="#F1F1F1" height="36.3887" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="259" x="1038" y="2550.3992"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="239" x="1048" y="2574.1511">callRunners(context, applicationArguments)</text><ellipse cx="1167.5" cy="2701.2427" fill="none" rx="10" ry="10" style="stroke:#222222;stroke-width:1.5;"/><line style="stroke:#222222;stroke-width:2.5;" x1="1161.3128" x2="1173.6872" y1="2695.0555" y2="2707.4299"/><line style="stroke:#222222;stroke-width:2.5;" x1="1173.6872" x2="1161.3128" y1="2695.0555" y2="2707.4299"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="30" y2="50"/><polygon fill="#181818" points="1163.5,40,1167.5,50,1171.5,40,1167.5,44" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="86.3887" y2="106.3887"/><polygon fill="#181818" points="1163.5,96.3887,1167.5,106.3887,1171.5,96.3887,1167.5,100.3887" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="142.7773" y2="192.8462"/><polygon fill="#181818" points="1163.5,182.8462,1167.5,192.8462,1171.5,182.8462,1167.5,186.8462" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="229.2349" y2="289.3037"/><polygon fill="#181818" points="1163.5,279.3037,1167.5,289.3037,1171.5,279.3037,1167.5,283.3037" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="325.6924" y2="366.884"/><polygon fill="#181818" points="1163.5,356.884,1167.5,366.884,1171.5,356.884,1167.5,360.884" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="403.2727" y2="742.6548"/><polygon fill="#181818" points="1163.5,732.6548,1167.5,742.6548,1171.5,732.6548,1167.5,736.6548" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="795.4321" y2="1113.6226"/><polygon fill="#181818" points="1163.5,1103.6226,1167.5,1113.6226,1171.5,1103.6226,1167.5,1107.6226" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="1150.0112" y2="1493.0276"/><polygon fill="#181818" points="1163.5,1483.0276,1167.5,1493.0276,1171.5,1483.0276,1167.5,1487.0276" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="1529.4163" y2="1903.6243"/><polygon fill="#181818" points="1163.5,1893.6243,1167.5,1903.6243,1171.5,1893.6243,1167.5,1897.6243" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="1940.0129" y2="2172.1858"/><polygon fill="#181818" points="1163.5,2162.1858,1167.5,2172.1858,1171.5,2162.1858,1167.5,2166.1858" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="2208.5745" y2="2419.5557"/><polygon fill="#181818" points="1163.5,2409.5557,1167.5,2419.5557,1171.5,2409.5557,1167.5,2413.5557" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="2455.9443" y2="2550.3992"/><polygon fill="#181818" points="1163.5,2540.3992,1167.5,2550.3992,1171.5,2540.3992,1167.5,2544.3992" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1167.5" x2="1167.5" y1="2586.7878" y2="2691.2427"/><polygon fill="#181818" points="1163.5,2681.2427,1167.5,2691.2427,1171.5,2681.2427,1167.5,2685.2427" style="stroke:#181818;stroke-width:1.0;"/><!--MD5=[7ab80583b59f85e167e37df3d68372c4]
@startuml springboot启动流程
start
:SpringApplication.run(DrawingBedOSSApplication.class, args);
:public ConfigurableApplicationContext run(String... args);
:DefaultBootstrapContext bootstrapContext = createBootstrapContext();
note right
// 这里会执行一次实现了BootstrapRegistryInitializer接口的方法
private DefaultBootstrapContext createBootstrapContext() {
    DefaultBootstrapContext bootstrapContext = new DefaultBootstrapContext();
    this.bootstrapRegistryInitializers.forEach((initializer) -> initializer.initialize(bootstrapContext));
    return bootstrapContext;
}
endnote
:configureHeadlessProperty();
note right
配置java.awt.headless属性为TRUE
endnote
:SpringApplicationRunListeners listeners = getRunListeners(args);
note right
List<SpringApplicationRunListener> listeners = 
getSpringFactoriesInstances(SpringApplicationRunListener.class, argumentResolver);
用来在整个启动流程中接受不同执行点事件通知的监听者，
SpringApplicationRunListener接口规定了SpringBoot的生命周期，
在各个生命周期广播相应的事件，调用实际的ApplicationListener类
endnote
:ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);\nConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);
note right
1. 将应用的args封装成ApplicationArguments，然后准备环境。
2. 调用getOrCreateEnvironment
ConfigurableEnvironment environment = getOrCreateEnvironment();
3. SpringApplication中applicationContextFactory = ApplicationContextFactory.DEFAULT
4. ApplicationContextFactory DEFAULT = new DefaultApplicationContextFactory()
private ConfigurableEnvironment getOrCreateEnvironment() {
    if (this.environment != null) {
        return this.environment;
    }
    ConfigurableEnvironment environment = this.applicationContextFactory.createEnvironment(this.webApplicationType);
    if (environment == null && this.applicationContextFactory != ApplicationContextFactory.DEFAULT) {
        environment = ApplicationContextFactory.DEFAULT.createEnvironment(this.webApplicationType);
    }
    return (environment != null) ? environment : new ApplicationEnvironment();
}
5. DEFAULT中createEnvironment函数是根据Spring的SPI机制从类路径中获取ApplicationContextFactory
这个ApplicationContextFactory有两个：ServletWebServerApplicationContextFactory和ReactiveWebServerApplicationContextFactory
public ConfigurableEnvironment createEnvironment(WebApplicationType webApplicationType) {
    return getFromSpringFactories(webApplicationType, ApplicationContextFactory::createEnvironment, null);
}
6. 根据webApplicationType类型是SERVLET返回的是ServletWebServerApplicationContextFactory中的创建环境
private <T> T getFromSpringFactories(WebApplicationType webApplicationType,
        BiFunction<ApplicationContextFactory, WebApplicationType, T> action, Supplier<T> defaultResult) {
    for (ApplicationContextFactory candidate : SpringFactoriesLoader.loadFactories(ApplicationContextFactory.class,
            getClass().getClassLoader())) {
        T result = action.apply(candidate, webApplicationType);
        if (result != null) {
            return result;
        }
    }
    return (defaultResult != null) ? defaultResult.get() : null;
}
7. ServletWebServerApplicationContextFactory中执行：
public ConfigurableEnvironment createEnvironment(WebApplicationType webApplicationType) {
    return (webApplicationType != WebApplicationType.SERVLET) ? null : new ApplicationServletEnvironment();
}
endnote
:Banner printedBanner = printBanner(environment);
note right
打印springboot图标
endnote
:context = createApplicationContext();
note right
1. SpringApplication中applicationContextFactory = ApplicationContextFactory.DEFAULT
2. ApplicationContextFactory DEFAULT = new DefaultApplicationContextFactory()
protected ConfigurableApplicationContext createApplicationContext() {
    return this.applicationContextFactory.create(this.webApplicationType);
}
3. DEFAULT中create函数是根据Spring的SPI机制从类路径中获取ApplicationContextFactory
public ConfigurableApplicationContext create(WebApplicationType webApplicationType) {
    try {
        return getFromSpringFactories(webApplicationType, ApplicationContextFactory::create,
                this::createDefaultApplicationContext);
    }
    catch (Exception ex) {
        throw new IllegalStateException("Unable create a default ApplicationContext instance, "
                + "you may need a custom ApplicationContextFactory", ex);
    }
}
4. 根据webApplicationType类型是SERVLET返回的是在ServletWebServerApplicationContextFactory中创建的context
private <T> T getFromSpringFactories(WebApplicationType webApplicationType,
        BiFunction<ApplicationContextFactory, WebApplicationType, T> action, Supplier<T> defaultResult) {
    for (ApplicationContextFactory candidate : SpringFactoriesLoader.loadFactories(ApplicationContextFactory.class,
            getClass().getClassLoader())) {
        T result = action.apply(candidate, webApplicationType);
        if (result != null) {
            return result;
        }
    }
    return (defaultResult != null) ? defaultResult.get() : null;
}

public ConfigurableApplicationContext create(WebApplicationType webApplicationType) {
    return (webApplicationType != WebApplicationType.SERVLET) ? null : createContext();
}
5. 创建的是AnnotationConfigServletWebServerApplicationContext
private ConfigurableApplicationContext createContext() {
    if (!AotDetector.useGeneratedArtifacts()) {
        return new AnnotationConfigServletWebServerApplicationContext();
    }
    return new ServletWebServerApplicationContext();
}
endnote
:prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);
note left
1. context.setEnvironment(environment);
2. applyInitializers(context);这里执行实现了ApplicationContextInitializer接口的方法
3. 如果启用了懒加载的话，设置懒加载的beanfactory后置处理器：
context.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());
4. 设置BeanFactory的后置处理器：context.addBeanFactoryPostProcessor(new PropertySourceOrderingBeanFactoryPostProcessor(context));
endnote
:refreshContext(context);
note right
private void refreshContext(ConfigurableApplicationContext context) {
    if (this.registerShutdownHook) {
        shutdownHook.registerApplicationContext(context);
    }
    refresh(context);
}
protected void refresh(ConfigurableApplicationContext applicationContext) {
    applicationContext.refresh();
}
由上文可知，创建的是AnnotationConfigServletWebServerApplicationContext，该context继承了ServletWebServerApplicationContext
所以实际执行的是ServletWebServerApplicationContext中的reshresh方法
public final void refresh() throws BeansException, IllegalStateException {
    try {
        super.refresh();
    }
    catch (RuntimeException ex) {
        WebServer webServer = this.webServer;
        if (webServer != null) {
            webServer.stop();
        }
        throw ex;
    }
}
endnote
:afterRefresh(context, applicationArguments);
:callRunners(context, applicationArguments);
note right
// 执行Runners,先执行ApplicationRunner，后执行CommandLineRunner
private void callRunners(ApplicationContext context, ApplicationArguments args) {
    context.getBeanProvider(Runner.class).orderedStream().forEach((runner) -> {
        if (runner instanceof ApplicationRunner applicationRunner) {
            callRunner(applicationRunner, args);
        }
        if (runner instanceof CommandLineRunner commandLineRunner) {
            callRunner(commandLineRunner, args);
        }
    });
}
endnote
end
@enduml

PlantUML version 1.2022.7(Tue Aug 23 01:01:30 CST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>